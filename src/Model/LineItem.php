<?php
/**
 * LineItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  PhoneBurner\AvalaraAFC
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PhoneBurner\AvalaraAFC\Model;

use ArrayAccess;
use DateTimeImmutable;
use PhoneBurner\AvalaraAFC\ObjectSerializer;

/**
 * LineItem Class Doc Comment
 *
 * @category Class
 * @description Data for an invoice or quote line item.
 * @package  PhoneBurner\AvalaraAFC
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LineItem implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      */
    protected static string $openAPIModelName = 'LineItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'ref' => 'string',
        'from' => Location::class,
        'to' => Location::class,
        'chg' => 'double',
        'line' => 'int',
        'loc' => 'int',
        'min' => 'double',
        'sale' => 'int',
        'plsp' => 'double',
        'incl' => 'bool',
        'pror' => 'double',
        'proadj' => 'int',
        'tran' => 'int',
        'serv' => 'int',
        'dbt' => 'bool',
        'adj' => 'bool',
        'adjm' => 'int',
        'disc' => 'int',
        'opt' => '\PhoneBurner\AvalaraAFC\Model\KeyValuePair[]',
        'prop' => 'int',
        'bill' => Location::class,
        'cust' => 'int',
        'lfln' => 'bool',
        'date' => DateTimeImmutable::class,
        'qty' => 'int',
        'glref' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPIFormats = [
        'ref' => null,
        'from' => null,
        'to' => null,
        'chg' => 'double',
        'line' => 'int32',
        'loc' => 'int32',
        'min' => 'double',
        'sale' => 'int32',
        'plsp' => 'double',
        'incl' => null,
        'pror' => 'double',
        'proadj' => 'int32',
        'tran' => 'int32',
        'serv' => 'int32',
        'dbt' => null,
        'adj' => null,
        'adjm' => 'int32',
        'disc' => 'int32',
        'opt' => null,
        'prop' => 'int32',
        'bill' => null,
        'cust' => 'int32',
        'lfln' => null,
        'date' => 'date-time',
        'qty' => 'int32',
        'glref' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'ref' => 'ref',
        'from' => 'from',
        'to' => 'to',
        'chg' => 'chg',
        'line' => 'line',
        'loc' => 'loc',
        'min' => 'min',
        'sale' => 'sale',
        'plsp' => 'plsp',
        'incl' => 'incl',
        'pror' => 'pror',
        'proadj' => 'proadj',
        'tran' => 'tran',
        'serv' => 'serv',
        'dbt' => 'dbt',
        'adj' => 'adj',
        'adjm' => 'adjm',
        'disc' => 'disc',
        'opt' => 'opt',
        'prop' => 'prop',
        'bill' => 'bill',
        'cust' => 'cust',
        'lfln' => 'lfln',
        'date' => 'date',
        'qty' => 'qty',
        'glref' => 'glref'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'ref' => 'setRef',
        'from' => 'setFrom',
        'to' => 'setTo',
        'chg' => 'setChg',
        'line' => 'setLine',
        'loc' => 'setLoc',
        'min' => 'setMin',
        'sale' => 'setSale',
        'plsp' => 'setPlsp',
        'incl' => 'setIncl',
        'pror' => 'setPror',
        'proadj' => 'setProadj',
        'tran' => 'setTran',
        'serv' => 'setServ',
        'dbt' => 'setDbt',
        'adj' => 'setAdj',
        'adjm' => 'setAdjm',
        'disc' => 'setDisc',
        'opt' => 'setOpt',
        'prop' => 'setProp',
        'bill' => 'setBill',
        'cust' => 'setCust',
        'lfln' => 'setLfln',
        'date' => 'setDate',
        'qty' => 'setQty',
        'glref' => 'setGlref'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'ref' => 'getRef',
        'from' => 'getFrom',
        'to' => 'getTo',
        'chg' => 'getChg',
        'line' => 'getLine',
        'loc' => 'getLoc',
        'min' => 'getMin',
        'sale' => 'getSale',
        'plsp' => 'getPlsp',
        'incl' => 'getIncl',
        'pror' => 'getPror',
        'proadj' => 'getProadj',
        'tran' => 'getTran',
        'serv' => 'getServ',
        'dbt' => 'getDbt',
        'adj' => 'getAdj',
        'adjm' => 'getAdjm',
        'disc' => 'getDisc',
        'opt' => 'getOpt',
        'prop' => 'getProp',
        'bill' => 'getBill',
        'cust' => 'getCust',
        'lfln' => 'getLfln',
        'date' => 'getDate',
        'qty' => 'getQty',
        'glref' => 'getGlref'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ref'] = $data['ref'] ?? null;
        $this->container['from'] = $data['from'] ?? null;
        $this->container['to'] = $data['to'] ?? null;
        $this->container['chg'] = $data['chg'] ?? null;
        $this->container['line'] = $data['line'] ?? null;
        $this->container['loc'] = $data['loc'] ?? null;
        $this->container['min'] = $data['min'] ?? null;
        $this->container['sale'] = $data['sale'] ?? null;
        $this->container['plsp'] = $data['plsp'] ?? null;
        $this->container['incl'] = $data['incl'] ?? null;
        $this->container['pror'] = $data['pror'] ?? null;
        $this->container['proadj'] = $data['proadj'] ?? null;
        $this->container['tran'] = $data['tran'] ?? null;
        $this->container['serv'] = $data['serv'] ?? null;
        $this->container['dbt'] = $data['dbt'] ?? null;
        $this->container['adj'] = $data['adj'] ?? null;
        $this->container['adjm'] = $data['adjm'] ?? null;
        $this->container['disc'] = $data['disc'] ?? null;
        $this->container['opt'] = $data['opt'] ?? null;
        $this->container['prop'] = $data['prop'] ?? null;
        $this->container['bill'] = $data['bill'] ?? null;
        $this->container['cust'] = $data['cust'] ?? null;
        $this->container['lfln'] = $data['lfln'] ?? null;
        $this->container['date'] = $data['date'] ?? null;
        $this->container['qty'] = $data['qty'] ?? null;
        $this->container['glref'] = $data['glref'] ?? null;
    }

    public function listInvalidProperties(): array
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    public function getRef(): ?string
    {
        return $this->container['ref'];
    }

    public function setRef(?string $ref): self
    {
        $this->container['ref'] = $ref;

        return $this;
    }

    public function getFrom(): ?Location
    {
        return $this->container['from'];
    }

    public function setFrom(?Location $from): self
    {
        $this->container['from'] = $from;

        return $this;
    }

    public function getTo(): ?Location
    {
        return $this->container['to'];
    }

    public function setTo(?Location $to): self
    {
        $this->container['to'] = $to;

        return $this;
    }

    public function getChg(): ?float
    {
        return $this->container['chg'];
    }

    public function setChg(?float $chg): self
    {
        $this->container['chg'] = $chg;

        return $this;
    }

    public function getLine(): ?int
    {
        return $this->container['line'];
    }

    public function setLine(?int $line): self
    {
        $this->container['line'] = $line;

        return $this;
    }

    public function getLoc(): ?int
    {
        return $this->container['loc'];
    }

    public function setLoc(?int $loc): self
    {
        $this->container['loc'] = $loc;

        return $this;
    }

    public function getMin(): ?float
    {
        return $this->container['min'];
    }

    public function setMin(?float $min): self
    {
        $this->container['min'] = $min;

        return $this;
    }

    /**
     * Gets sale
     *
     * @return int|null
     */
    public function getSale()
    {
        return $this->container['sale'];
    }

    /**
     * Sets sale
     *
     * @param int|null $sale 0 - Wholesale : Indicates that the item was sold to a wholeseller.  1 - Retail : Indicates that the item was sold to an end user - a retail sale.  2 - Consumed : Indicates that the item was consumed directly (SAU products only).  3 - VendorUse : Indicates that the item is subject to vendor use tax (SAU products only).
     *
     * @return $this
     */
    public function setSale($sale)
    {
        $this->container['sale'] = $sale;

        return $this;
    }

    /**
     * Gets plsp
     *
     * @return double|null
     */
    public function getPlsp()
    {
        return $this->container['plsp'];
    }

    /**
     * Sets plsp
     *
     * @param double|null $plsp Split for private-line transactions.
     *
     * @return $this
     */
    public function setPlsp($plsp)
    {
        $this->container['plsp'] = $plsp;

        return $this;
    }

    /**
     * Gets incl
     *
     * @return bool|null
     */
    public function getIncl()
    {
        return $this->container['incl'];
    }

    /**
     * Sets incl
     *
     * @param bool|null $incl Indicates if the charge for this line item is tax-inclusive.
     *
     * @return $this
     */
    public function setIncl($incl)
    {
        $this->container['incl'] = $incl;

        return $this;
    }

    /**
     * Gets pror
     *
     * @return double|null
     */
    public function getPror()
    {
        return $this->container['pror'];
    }

    /**
     * Sets pror
     *
     * @param double|null $pror For pro-rated tax calculations. Percentage to pro-rate.
     *
     * @return $this
     */
    public function setPror($pror)
    {
        $this->container['pror'] = $pror;

        return $this;
    }

    /**
     * Gets proadj
     *
     * @return int|null
     */
    public function getProadj()
    {
        return $this->container['proadj'];
    }

    /**
     * Sets proadj
     *
     * @param int|null $proadj For pro-rated credit or adjustment calculations.  0 = default  1 = do not return non-proratable fixed taxes in response  2 = return non-proratable fixed taxes in response
     *
     * @return $this
     */
    public function setProadj($proadj)
    {
        $this->container['proadj'] = $proadj;

        return $this;
    }

    /**
     * Gets tran
     *
     * @return int|null
     */
    public function getTran()
    {
        return $this->container['tran'];
    }

    /**
     * Sets tran
     *
     * @param int|null $tran Transaction type ID.
     *
     * @return $this
     */
    public function setTran($tran)
    {
        $this->container['tran'] = $tran;

        return $this;
    }

    /**
     * Gets serv
     *
     * @return int|null
     */
    public function getServ()
    {
        return $this->container['serv'];
    }

    /**
     * Sets serv
     *
     * @param int|null $serv Service type ID.
     *
     * @return $this
     */
    public function setServ($serv)
    {
        $this->container['serv'] = $serv;

        return $this;
    }

    /**
     * Gets dbt
     *
     * @return bool|null
     */
    public function getDbt()
    {
        return $this->container['dbt'];
    }

    /**
     * Sets dbt
     *
     * @param bool|null $dbt Indicates if this line item is a debit card transaction.  Default: false.
     *
     * @return $this
     */
    public function setDbt($dbt)
    {
        $this->container['dbt'] = $dbt;

        return $this;
    }

    /**
     * Gets adj
     *
     * @return bool|null
     */
    public function getAdj()
    {
        return $this->container['adj'];
    }

    /**
     * Sets adj
     *
     * @param bool|null $adj Indicates if this line item is an adjustment.  Default: false.
     *
     * @return $this
     */
    public function setAdj($adj)
    {
        $this->container['adj'] = $adj;

        return $this;
    }

    /**
     * Gets adjm
     *
     * @return int|null
     */
    public function getAdjm()
    {
        return $this->container['adjm'];
    }

    /**
     * Sets adjm
     *
     * @param int|null $adjm Adjustment method.
     *
     * @return $this
     */
    public function setAdjm($adjm)
    {
        $this->container['adjm'] = $adjm;

        return $this;
    }

    /**
     * Gets disc
     *
     * @return int|null
     */
    public function getDisc()
    {
        return $this->container['disc'];
    }

    /**
     * Sets disc
     *
     * @param int|null $disc Discount type for adjustments.
     *
     * @return $this
     */
    public function setDisc($disc)
    {
        $this->container['disc'] = $disc;

        return $this;
    }

    /**
     * Gets opt
     *
     * @return \PhoneBurner\AvalaraAFC\Model\KeyValuePair[]|null
     */
    public function getOpt()
    {
        return $this->container['opt'];
    }

    /**
     * Sets opt
     *
     * @param \PhoneBurner\AvalaraAFC\Model\KeyValuePair[]|null $opt Optional values for line item. Maximum of 5. Keys must be numeric from 5 to 10.
     *
     * @return $this
     */
    public function setOpt($opt)
    {
        $this->container['opt'] = $opt;

        return $this;
    }

    /**
     * Gets prop
     *
     * @return int|null
     */
    public function getProp()
    {
        return $this->container['prop'];
    }

    /**
     * Sets prop
     *
     * @param int|null $prop Attribute/property value for sales and use transaction/service pairs.
     *
     * @return $this
     */
    public function setProp($prop)
    {
        $this->container['prop'] = $prop;

        return $this;
    }

    /**
     * Gets bill
     *
     * @return \PhoneBurner\AvalaraAFC\Model\Location|null
     */
    public function getBill()
    {
        return $this->container['bill'];
    }

    /**
     * Sets bill
     *
     * @param \PhoneBurner\AvalaraAFC\Model\Location|null $bill bill
     *
     * @return $this
     */
    public function setBill($bill)
    {
        $this->container['bill'] = $bill;

        return $this;
    }

    /**
     * Gets cust
     *
     * @return int|null
     */
    public function getCust()
    {
        return $this->container['cust'];
    }

    /**
     * Sets cust
     *
     * @param int|null $cust Customer type.
     *
     * @return $this
     */
    public function setCust($cust)
    {
        $this->container['cust'] = $cust;

        return $this;
    }

    /**
     * Gets lfln
     *
     * @return bool|null
     */
    public function getLfln()
    {
        return $this->container['lfln'];
    }

    /**
     * Sets lfln
     *
     * @param bool|null $lfln Indicates if customer is a Lifeline participant.  Default: false.
     *
     * @return $this
     */
    public function setLfln($lfln)
    {
        $this->container['lfln'] = $lfln;

        return $this;
    }

    public function getDate(): ?DateTimeImmutable
    {
        return $this->container['date'];
    }

    public function setDate(?DateTimeImmutable $date): self
    {
        $this->container['date'] = $date;

        return $this;
    }

    public function getQty(): ?int
    {
        return $this->container['qty'];
    }

    public function setQty(?int $qty): self
    {
        $this->container['qty'] = $qty;

        return $this;
    }

    public function getGlref(): ?string
    {
        return $this->container['glref'];
    }

    public function setGlref(?string $glref): self
    {
        $this->container['glref'] = $glref;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR | JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}


